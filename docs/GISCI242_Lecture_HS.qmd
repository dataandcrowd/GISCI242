---
title: "Gentle Introduction to Programming"
subtitle: ": for GIS Dummies"
date: 04/22/2024
date-format: long
author:
  - name: Hyesop Shin
    orcid: 0000-0003-2637-7933
    email: hyesop.shin@auckland.ac.nz
    affiliations:
      - name: University of Auckland
        address: 23 Symonds Street
        city: Auckland
        postal-code: 1010
format: 
  revealjs:
      logo: Figs/uoa-logo.png
      css: logo.css
      slide-number: true
      show-slide-number: print
#format: html
editor: source
include-in-header:
  - text: |
      <style type="text/css">
      ul li ul li {
        font-size: 0.7em;
      }
      </style>
---

## What will we cover?

* Why programme in a GIS course?
* Programming Basics
* Interactive lecture

## Why do we learn to code?

* We are not computer scientists (I am not at least)
* GISci and Geography disciplines are becoming increasingly quantitative
* Large datasets
* We want to do our job quickly and do less of the same work.
* Programming can also be fun
* Programming can help make us better scientists - <span style="color:blue;">Open Science</span>


---

###

::: {.panel-tabset}

## ArcGIS

![](Figs/Interpolation-IDW-ArcGIS-Pro.jpg){width="80%"}

## Programming

Example: `Python`

```{r}
#| out.width="200%"
knitr::include_graphics("Figs/iteration.png")
```


## 진짜예시 
haha

:::


## What is a computer?

```{r}
knitr::include_graphics("Figs/computer-diagram.png")
```

---

![](Figs/python_process.jpg)

## What are computers <span style="color:blue;">good</span> at?
Given the definition above, it may be clear that computers are in some ways quite simple, and as a result there are certain tasks where computers excel. 

 
Tasks computers are good at include:

* well-defined tasks
* data storage and manipulation
* repetitive calculations
* processing data or instructions


## What are computers <span style="color:#A23F29;">bad</span> at?
:::: {.columns .incremental}

::: {.column width="50%"}
* Abstract or poorly defined tasks

```python
print("Python" > "R")
```

:::

::: {.column width="50%"}
- Tasks requiring impossible computing power (intractable tasks)

```python
## True Pi
3.14159265358979323846264338327


>>> from mpmath import mp
>>> mp.dps = 20    # set number of digits
>>> print(mp.pi)
3.1415926535897932385
```
:::
::::


## We need to be less poetic 
and become more direct to the point

<iframe src="https://giphy.com/embed/HKwXmH6TyFtFUaTSHn" width="800" height="600" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="https://giphy.com/gifs/nbclawandorder-season-2-nbc-organized-crime-HKwXmH6TyFtFUaTSHn"></a></p>



## Why Python?

---

### 1. Python is widely used

* Python being 1st in a row in programming ([TIOBE Rank](https://www.tiobe.com/tiobe-index/))

```{r}
knitr::include_graphics("Figs/rank.png")
```

---

### 2. Python is open
* Open as in
    - free of charge
    - as in access (download and run)
    - over time
    - not closed
    - reuse and change
    - any place (platform) and for everyone

---

### 3. Python is approachable

<iframe src="https://giphy.com/embed/NaboQwhxK3gMU" width="480" height="270" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="https://giphy.com/gifs/posts-karma-NaboQwhxK3gMU"></a></p>

* Modern interpreted languages (Python) – Code is interpreted line-by-line via a programme
* Translating high-level human readable code to machine readable code
* Scripting
    - Only need snippets of code
    - Can perform jobs quickly
    - Ideal for GIS jobs

---

### 4. Python is connected    

* Geographic Information Systems (GIS) software such as QGIS or ArcGIS now include a Python interpreter built in to the software
* Can customise solutions for your specific data analysis needs
    

---

### The War of Coding

![](Figs/R_Python.jpeg)

::: {style="font-size: 70%;"}
FYI: We have plenty of Geocomputation courses in postgraduate courses!
<br>
R & Python both have specialties.
<br>
I am an R enthusiast
:::


## Interactive show and do with Python

What we will cover:

* Variables
* Loops and basic conditionals
* Functions
* Geopandas



## How will we cover it?

* Jupyter lab / Notebook
* <p><b><span style="color:blue;">Google Colab</span></b></p>
    - "Another" Free service provided by Google
    - Live code, text and graphics in one place
    - Compatible with multiple languages
    - Can build your own specialist 'environments'

![](Figs/colab.png){.absolute top=100 right=150 width="200" height="200"}



## 
&nbsp;  

### Let's Take a Quality Break!{style="text-align: center;"}

&nbsp;  

Make sure you are well set up with Google Colab using the URL below:
<center>https://colab.research.google.com </center>



## Basic Programming Concepts 
We will cover:

* Simple Python maths
* Functions
* `for` loops
* Conditional Statements
* Import files



## Simple Python maths

::: {style="font-size: 250%;"}

```python 

1 + 1

5 * 7

2**3
```
:::

---

### Simple Python maths - answers

::: {style="font-size: 250%;"}

```{python}
#| echo: true

1 + 1

5 * 7

2**3
```

:::

---

### Strings

::: {style="font-size: 150%;"}

```python
print("hello world") # print strings

len("hello world") # to count text in Python Shell
print(len("hello world")) # in Google Colab
```

:::

## Maths with modules

::: {style="font-size: 150%;"}

```python
sin(3)
sqrt(4)
```

&nbsp;  
&nbsp; 

Did you get the result you expected?

:::

---

### Facing Errors can be daunting

```
sin(3)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-1-acdde95a6016> in <cell line: 1>()
----> 1 sin(3)
NameError: name 'sin' is not defined
```


```
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-2-317e033d29d5> in <cell line: 1>()
----> 1 sqrt(4)

NameError: name 'sqrt' is not defined
```

&nbsp; 
Python can’t calculate square roots or do basic trigonometry? Of course it can, but we need one more step.


---

### Solution


```{python}
#| echo: true
import math

math.sin(3)
math.sqrt(4)
```

Well done! You have just managed to use a `math` module too!

---

### Combining Functions

Functions can also be combined. 
The `print()` function returns values within the parentheses as text on the screen. 
Let’s print the value of the square root of four.

```python
print(math.sqrt(4))
```

&nbsp;

```python
print("The square root of 4 is", math.sqrt(4))
```



## Variables
A <span style="color:blue;">**variable**</span> can be used to store values calculated in expressions and used for other calculations


```{python}
#| echo: true

temp_celsius = 10.0

print(temp_celsius)
```

---

### Data types
* A <span style="color:blue;">*data type*</span> determines the characteristics of data in a programme
* Basic data types in Python.

| Data type name | Data type            | Example |
|----------------|----------------------|---------|
| `int`            | Whole integer values | 4       |
| `float`          | Decimal values       | 3.1415  |
| `str`            | Character strings    | 'Freezing'   |
| `bool`           | True/false values    | True    |

---

### Data types

```{python}
#| echo: true

weatherForecast = "Freezing"
type(weatherForecast)

```



## Lists and Indices

---

### Lists
When we have more clothes/items we would like to align similar types of clothes into a drawer

![](Figs/drawer.png){fig-align="center"}

---

### List Example 1

::: {style="font-size: 150%;"}

```python
top = ["socks", "underwear", "handkerchief"]
middle = ["T-shirts", "Pajamas", "Trousers", "Shorts"]
bottom = [30, 73, 100, 62]

print(top[0])
print(min(bottom))
```

```
socks
```
:::

---

### List Example 2

Let’s first create a list of selected station_name values and print it to the screen.

```{python}
#| echo: true

station_names = [
    "Britomart",
    "Ōrākei",
    "Meadowbank",
    "Purewa",
    "Glen Innes",
    "Tamaki",
    "Panmure",
    "Sylvia Park"
]

station_names
```

```{python}
#| echo: true
type(station_names)
```

---

### Index values
To access an individual value in the list we need to use an **index** value.

```{python}
#| echo: true

station_names[1]
```

Python returns 'Ōrākei' instead of 'Britomart'. Can anybody guess why?

---

### Index values

```{python}
#| echo: true
station_names[-1]
station_names[-8]
```

---

### Modifying list values

```{python}
#| echo: true
station_names[-1] = 'Shopping Mall'
station_names

station_names.reverse()
station_names

station_names.append("new station")
print(station_names)
```

---

### Your Turn
* Define `station_names` in your environment
* Add Otahuhu, Middlemore, Papatoetoe, Puhinui, Manukau (you can Google "Auckland Eastern Line" and find the Wikipedia)
* Assign that in your environment as `more_eastern`


```python
station_names = [
    "Britomart",
    "Ōrākei",
    "Meadowbank",
    "Purewa",
    "Glen Innes",
    "Tamaki",
    "Panmure",
    "Sylvia Park"
]
```





## Introducing the `for` loop
* Loops allow parts of code to be repeated some number of times
* Iterates over all of the items in a Python list and performing a calculation on each item.


<div id="contentframe" style="position:absolute; top: 400px; left: 0px;">
<iframe src="https://giphy.com/embed/ifMxbaTDxAi3kUraHa" width="300" height="230" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
 </div>

<div id="contentframe" style="position:absolute; top: 450px; left: 320px;">
vs
</div>

<div id="contentframe" style="position:absolute; top: 400px; left: 400px;">
<iframe src="https://giphy.com/embed/ZB1snEzf9Njveo73w2" width="300" height="230" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
</div>


---

### Hand-picked works: When we do loops manually
<span style="color:red;">Bad example</span>

```{python}
#| echo: true

station_names = [
    "Britomart",
    "Ōrākei",
    "Meadowbank",
    "Purewa",
    "Glen Innes",
    "Tamaki",
    "Panmure",
    "Sylvia Park"
]

```


```{python}
#| echo: true
station_names[0]

station_names[1]
```


---

### for loop: an example


```{python}
#| echo: true

for name in station_names:
    print(name)
```

---

### Different example

```python
european_cities = ["Amsterdam", "Brussels", "London", "Rome"]

for city in european_cities:
    print(city)
```

---

### for loop: concept

```python
for variable in collection:
        do things with variable
```
Let’s break down the code above to see some essential aspect of for loops:

* The `variable` can be any name you like.
* The statement of the `for` loop must end with a :
* The code that should be executed as part of the loop must be indented beneath the `for` loop statement. The typical indentation is 4 spaces.
* There is no additional special word needed to end the loop, you simply change the indentation back to normal.

In summary, `for` loops are useful to repeat some part of the code a finite number of times.

---

### Your daily for loop

```python
for day in my_life:
    wake_up()
    take_shower()
    eat_breakfast()
    brush_teeth()
    ride_beam()
    come_to_lecture()
    ...
```

![](Figs/iteration.jpeg){.absolute top=150 right=-90 width=70%}

---

### Examples using `range`

```{python}
#| echo: true

for value in range(5):
    print(value)
```

---

### Examples using two lists

```{python}
#| echo: true

cities = ["Helsinki", "Stockholm", "Oslo", "Reykjavik", "Copenhagen"]

countries = ["Finland", "Sweden", "Norway", "Iceland", "Denmark"]
```


```python
for i in range(len(cities)):
    print(cities[i], "is the capital of", countries[i])
```

---

### Examples using two lists - Answers

```{python}
#| echo: true

for i in range(len(cities)):
    print(cities[i], "is the capital of", countries[i])
```


## Conditional statements
* We will learn how to make choices in our code using conditional statements (`if`, `elif`, `else`) and Boolean values (`True`, `False`).
* Conditional statements can change the code behaviour based on certain conditions. 
* The idea is simple: **IF** a condition is met, **THEN** a set of actions is performed.

---

### if else Example 1

::: {style="font-size: 200%;"}

```python
temperature = 17

if temperature > 25:
    print("it is hot!")
else:
    print("it is not hot!")
    
print(temperature)    
```

```
it is not hot
```
:::

---

### if else Example 2

::: {style="font-size: 200%;"}

```python
temperature = 30

if temperature > 25:
    print("it is hot!")
else:
    print("it is not hot!")
    
print(temperature)    
```

```
it is hot
```
:::

---

### `if` statement without `else`

* The code indented under the if-statement is not executed if the condition is not True. Instead, code under the else-statement gets executed.
* How about if without else?


::: {style="font-size: 140%;"}

```python
temperature = 17

if temperature > 25:
    print(temperature, "is greater than 25")
```

:::

---

### Conditional operator

::: {style="font-size: 140%;"}

```python
weather = "rain"

if weather == "rain":
    print("Wear a raincoat!")
else:
    print("No raincoat needed.")
```

```
Wear a raincoat!
```

:::

---

### Comparison operators

| Operator | Description              |
|----------|--------------------------|
| <        | Less than                |
| <=       | Less than or equal to    |
| ==       | Equal to                 |
| >=       | Greater than or equal to |
| >        | Greater than             |
| !=       | Not equal to             |

---

### Boolean values

* Comparison operations yield Boolean values (`True` or `False`). 
* In Python, the words True and False are reserved for these Boolean values, and can’t be used for anything else.

::: {style="font-size: 140%;"}

```python
temperature > 25
```
```
False
```
:::

---

### if, elif and else

::: {style="font-size: 70%;"}
* We can link several conditions together using the “else if” -statement `elif.` 
* Python checks the `elif` and else statements only if previous conditions were False. 
* You can have multiple `elif` statements to check for additional conditions.

:::


::: {style="font-size: 120%;"}

```python
temperature = -3

if temperature > 0:
    print(temperature, "degrees celsius is above freezing")
elif temperature == 0:
    print(temperature, "degrees celsius is at the freezing point")
else:
    print(temperature, "degrees celsius is below freezing")
```

```
-3 degrees celsius is below freezing
```
:::

---

## Combinations
### Combining conditions

* We can also use and and or to combine multiple conditions on boolean values

| Keyword | Example | Description                   |
|---------|---------|-------------------------------|
| and     | a and b | True if both a and b are True |
| or      | a or b  | True if either a or b is True |


```python
weather = "rain"
wind_speed = 14
comfort_limit = 10

# If it is windy or raining, print "stay at home",
# otherwise (else) print "go out and enjoy the weather!"
if (weather == "rain") or (wind_speed >= comfort_limit):
    print("Just stay at home")
else:
    print("Go out and enjoy the weather! :)")
```

```
Just stay at home
```

---

### Combining for-loops and conditional statements
* We can also combine for-loops and conditional statements. 
* Let’s iterate over a list of temperatures, and check if the temperature is hot or not


```python
temperatures = [0, 12, 17, 28, 30]

# For each temperature, if the temperature is greater than 25, print "..is hot"
for temperature in temperatures:
    if temperature > 25:
        print(temperature, "is hot")
    else:
        print(temperature, "is not hot")
```

```python
0 is not hot
12 is not hot
17 is not hot
28 is hot
30 is hot
```


## Summary - What have we learned?

::: {.incremental}
* Programming is not too difficult than you think. They are easy to understand and share (and fun!)
* Programmes keep a log of the changes you make to your programmes - open science
* Python is one of the popular programming languages - we are going to nail this!
* Basics of Python
   - Basic programming
   - Fucntions
   - for loops
   - Conditional statements
   - Combos of the above

:::


## Next week
* Show ways to install Python offline
* How to import data
* How to clean and use data
* How to play with GIS data




