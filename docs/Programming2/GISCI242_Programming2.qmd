---
title: "Gentle Introduction to Programming Part 2"
subtitle: ": GIS with Geopandas"
date: 04/22/2024
date-format: long
author:
  - name: Hyesop Shin
    orcid: 0000-0003-2637-7933
    email: hyesop.shin@auckland.ac.nz
    affiliations:
      - name: University of Auckland
        address: 23 Symonds Street
        city: Auckland
        postal-code: 1010
format: 
  revealjs:
      logo: Figs/uoa-logo.png
      css: logo.css
      slide-number: true
      show-slide-number: print
editor: source
include-in-header:
  - text: |
      <style type="text/css">
      ul li ul li {
        font-size: 0.7em;
      }
      </style>
---

<!--
## Make sure you download some examples for today's class
* countries of the world (csv, txt)
* ice cream ratings
* flavours
* customer call list
-->
## Load your Google Colab

* https://colab.research.google.com
* https://tinyurl/gisci242


## Recap of Previous Lecture

-   Maths
-   How to assign variables, lists
-   For loops
-   Conditional statements
-   How to call packages using `import pkg_name`
- spacing is important

## Terminology - Brackets

* To avoid any confusion between NZ and US English, I will use:
    - [ ] as square brackets
    - ( ) as round brackets
    - { } as curly brackets
    - < > as angle(d) brackets 


## What will we cover today?

-   How to import spreadsheet data with `pandas`
-   How to clean and explore data
-   Data Visualisation
-   How to play with GIS data with `geopandas`

::: notes
:::

## `pandas` or `polars`

![](Figs/polarsvspandas.jpeg){width=40%}
![](https://images.datacamp.com/image/upload/v1686051721/image4_478e2c7db1.png){.absolute top=50 right=-200 width=80%}

<br>

* But we are going to learn `pandas` anyway
* Because `pandas` & `geopandas` are connected


## Getting started with Pandas
* Reading in files
* Filtering columns and rows
* `Group by` and `Aggregation`
* Merging dataframes
* Visulisation



## What is a dataframe

![](https://media.geeksforgeeks.org/wp-content/uploads/finallpandas.png){fig-align=center}

::: {style="font-size: 50%;"}
source: geeksforgeeks.org
:::

* Tabular array 
* Might be a stack of lists (recap of last lecture) 
* A combined data series


## DataFrame vs Data series?

* A Series is a 1-dimensional data structure used to represent a single column or row of data within a DataFrame or as a standalone data structure.
* A DataFrame is a 2-dimensional data structure designed for handling tabular data with multiple columns

![](https://av-eks-blogoptimized.s3.amazonaws.com/series-and-dataframe.png){fig-align=center}




## Reading in Files

![](https://pandas.pydata.org/docs/_images/02_io_readwrite.svg)

::: {style="font-size: 100%;"}
```python 
import pandas as pd

df = pd.read_csv('file_name')
```
:::


* Disclaimer: 
    - loading files in your machine is different to how you would uploaded in on **Google Colab**.
    - Visit the <span style="color:blue;">Live Coding Tab</span> for examples

---

### Example

```python
#| echo: true
import pandas as pd

# intialise data of lists.
data = {'Name':['Tom', 'nick', 'krish', 'jack'],
        'Age':[20, 21, 19, 18]}
        
# Create DataFrame
df = pd.DataFrame(data)

# Print the output.
print(df)
```

```
    Name  Age
0    Tom   20
1   nick   21
2  krish   19
3   jack   18
```

* Pandas has assigned a key for each person as the numerical values 0 through 3
* If you would like to have different index values, say, the person's initial, you can do that easily as well.


---

### Import/Export different file types
* `.csv`
* `.txt`
* `.xlsx`
* `.json`
* ...

```python
df = read_csv('file')
df.to_csv(file_name, sep='\t', encoding='utf-8')
df.to_excel("output.xlsx") 
```

---



### Understanding the data structure
* The info methods and the dtypes attribute are convenient for a first check.


```python
df.info() ## technical summary (e.g. dataframe, rows/columnns and their names)
df.dtypes ## generic summary
```

<br>

* `head`/`tail` to check how the dataframe actually looks like


```python
df.head()
df.tail()
```

## Indexing DataFrames

::: {style="font-size: 80%;"}
* When selecting subsets of data, `[]` are used.
* Inside `[]`, you can use a single column/row label, a list of column/row labels, a slice of labels, a conditional expression or a colon.
* `loc` when selecting the row and column names e.g. df["age"]
* `iloc` when specifying the positions in the table e.g. df[2:5]
* You can assign new values to a selection based on `loc`/`iloc.`
:::


---

### Subsetting the data frame: Columns

![](https://pandas.pydata.org/docs/_images/03_subset_columns.svg)

* Selecting a single column
* Selecting multiple columns

```python
df["Continent"]
df[["Continent", "Year"]]

df.iloc[:, 3]
```

---

### Subsetting the data frame: Rows

![](https://pandas.pydata.org/docs/_images/03_subset_rows.svg)

```python
df[df["Population(million)"] > 100]
df[df["Continent"] == "Asia"]

ov10m_asia = df[(df["Population(million)"] > 100) & (df["Continent"] == "Asia") ]

titanic.iloc[9:25, 2:5]
```


<!--
* Subset population over 50 million
* Subset Population over 50 million + Continent
* Subset continents either Europe or South America
* Remove NA / NaN values

::: {style="font-size: 50%;"}
When combining multiple conditional statements, each condition must be surrounded by parentheses `()`. Moreover, you can not use `or`/`and` but need to use the or operator `|` and the and operator `&`.
:::
-->

---

## Creating New Columns from Existing Data in `df`

![](https://pandas.pydata.org/docs/_images/05_newcolumn_1.svg){fig-align=center}

* Required for performing calculations across columns.
* Essential for data manipulation.


---

### Example


```python
import pandas as pd

# Creating the dataset with student names
df1 = pd.DataFrame({
    'Student': ['Alice', 'Bob', 'Charlie'],
    'Maths': [9, 8, 7],
    'English': [4, 10, 6],
    'Science': [8, 7, 8],
    'History': [9, 6, 5]
})

# Calculating the total score for each student and adding it as a new column 'Total'
df1['Total'] = df1[['Maths', 'English', 
                    'Science', 'History']].sum(axis=1)
# Display the updated dataset
print(df1)
```

```
   Student  Maths  English  Science  History  Total
0    Alice      9        4        8        9     30
1      Bob      8       10        7        6     31
2  Charlie      7        6        8        5     26
```



## <br> Grouping and Aggregation

---

### Grouping (in `Pandas`)

:::: {.columns}

::: {.column width="40%"}

![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSiUr0NSceFvB3vYV39lO01DRDld0HGEONzBiPZZCGUUQ&s){width=100%}

::: {style="font-size: 50%;"}
Source: Soner Yıldırım [Towards Data Science](https://towardsdatascience.com/all-about-pandas-groupby-explained-with-25-examples-494e04a8ef56)
:::
:::

::: {.column width="15%"}

:::

::: {.column width="45%"}
::: {style="font-size: 80%;"}

Grouping is used to group data using some criteria from our dataset. It is used as split-apply-combine strategy.

* *Splitting* the data into groups based on some criteria e.g. Brand
* *Applying* a function to each group independently e.g. Mean
* *Combining* the results into a data structure e,g, Price

:::
:::
::::

## Merge df's
* Concatenate DataFrames along row and column.
* Merge DataFrames on specific keys by different join logics like `left join`, `inner join`, etc.
* Join DataFrames by index.

![](https://media.geeksforgeeks.org/wp-content/uploads/joinimages.png){fig-align=center}


## <br> Break Time


## Geospatial data and GeoPandas

![](https://miro.medium.com/v2/resize:fit:1238/1*x9gF-ZVR4JMAv3cTH6LtfA.png){fig-align=center}

* Geospatial data are data with location information
* The geometry variable indicates where the *data* is located

* New Zealand population using code

![](https://newzealandmap360.com/img/1200/new%20zealand-population-density-map.jpg){fig-align=center width=120%}

---

## How we record the real world
:::: {.columns}

::: {.column width="60%"}
![](Figs/howwemap.png){fig-align=center width=120%}
:::

::: {.column width="40%"}
::: {style="font-size: 80%;"}
- Point (2, 10)
- LineString ([(1,2), (1,5)...])
- Polygons ([(13,2), (15,4)...])
- Pixels
:::
:::

::::

## Vector attribute data
* Vector features have attributes that look like a table
* Watch out for the projections

![](Figs/attribute.png){fig-align=center width=70%}

## Projections
* Coordinate reference systems (CRS): a consistent way to represent locations in space ([Land Information NZ](https://www.linz.govt.nz/guidance/geodetic-system/coordinate-systems-used-new-zealand))
* Geographic coordinate systems (Global): Longitude/Latitude, UTM
* Projected coordinate systems (Local): 2D maps.
* Each projection provides a unique code starting with EPSG
    - Long/Lat decimal points (EPSG: 4326)
    - NZ transverse mercator (EPSG: 2193)


## <br> Let's get our hands dirty with `geopandas`!




## <br> Thanks! <br> Q & A {style="text-align: center;"}
